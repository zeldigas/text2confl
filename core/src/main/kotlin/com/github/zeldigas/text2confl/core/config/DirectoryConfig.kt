package com.github.zeldigas.text2confl.core.config

import com.github.zeldigas.text2confl.convert.EditorVersion
import com.github.zeldigas.text2confl.convert.asciidoc.AsciidoctorConfiguration
import com.github.zeldigas.text2confl.convert.markdown.*
import com.github.zeldigas.text2confl.core.upload.ChangeDetector
import java.net.URI
import java.nio.file.Path
import kotlin.io.path.Path
import kotlin.io.path.createTempDirectory
import kotlin.io.path.div

/**
 * Holder of data that can be put to `.text2confl.yml` configuration file that is located in root directory of directory structure
 */
data class DirectoryConfig(
    val server: String? = null,
    val confluenceCloud: Boolean? = null,
    val skipSsl: Boolean = false,
    val space: String? = null,
    val defaultParentId: String? = null,
    val defaultParent: String? = null,
    val removeOrphans: Cleanup = Cleanup.Managed,
    val notifyWatchers: Boolean = true,
    val titlePrefix: String = "",
    val titlePostfix: String = "",
    val editorVersion: EditorVersion? = null,
    val modificationCheck: ChangeDetector = ChangeDetector.HASH,
    val docsLocation: String? = null,
    val addAutogeneratedNote: Boolean? = null,
    val autogeneratedNote: String? = null,
    val tenant: String? = null,
    val codeBlocks: CodeBlockParams = CodeBlockParams(),
    val markdown: MarkdownParams = MarkdownParams(),
    val asciidoc: AsciidocParams = AsciidocParams()
) {
    lateinit var docsDir: Path
}

data class CodeBlockParams(
    val defaultLanguage: String? = null,
    val extraMapping: Map<String, String> = emptyMap()
)

data class MarkdownParams(
    val anyMacro: Boolean? = null,
    val enabledMacros: List<String> = emptyList(),
    val emoji: Boolean = true,
    val diagrams: MarkdownDiagramParameters = MarkdownDiagramParameters(),
    val autoLinks: Boolean = true,
    val tables: TablesConfiguration = TablesConfiguration(),
    val typography: TypographyConfiguration = TypographyConfiguration()
) {
    fun toConfig(docsDir: Path): MarkdownConfiguration {
        val any = anyMacro ?: enabledMacros.isEmpty()
        return MarkdownConfiguration(
            any, supportedMacros = enabledMacros,
            emoji = emoji,
            diagrams = diagrams.toConfig(docsDir),
            tables = tables,
            autoLinks = autoLinks,
            typography = typography
        )
    }
}

data class MarkdownDiagramParameters(
    val tempDir: Boolean = false,
    val baseDir: String = ".diagrams",
    val mermaid: MermaidDiagramsConfiguration = MermaidDiagramsConfiguration(),
    val plantuml: PlantUmlDiagramsConfiguration = PlantUmlDiagramsConfiguration(),
    val kroki: KrokiDiagramsConfiguration = KrokiDiagramsConfiguration()
) {
    fun toConfig(docsDir: Path): DiagramsConfiguration {
        val baseDir = if (tempDir) createTempDirectory() else docsDir / baseDir
        return DiagramsConfiguration(
            diagramsBaseDir = baseDir,
            mermaid = mermaid.copy(
                configFile = mermaid.configFile?.relativeTo(docsDir),
                cssFile = mermaid.cssFile?.relativeTo(docsDir),
                puppeeterConfig = mermaid.puppeeterConfig?.relativeTo(docsDir)
            ),
            plantuml = plantuml,
            kroki = kroki
        )
    }

    private fun String.relativeTo(base: Path): String = base.resolve(Path(this)).toString()

}


data class AsciidocParams(
    val gems: List<String> = emptyList(),
    val diagrams: AsciidocDiagrams = AsciidocDiagrams.Diagrams,
    val bundledMacros: Boolean = true,
    val attributes: Map<String, Any?> = emptyMap(),
    val tempDir: Boolean = false,
    val baseDir: String = ".asciidoc",
    val kroki: KrokiDiagramsParameters = KrokiDiagramsParameters()
) {
    fun toConfig(docsDir: Path): AsciidoctorConfiguration {
        val baseDir = if (tempDir) createTempDirectory() else docsDir / baseDir

        return AsciidoctorConfiguration(
            libsToLoad = gems + diagrams.let {
                when (it) {
                    AsciidocDiagrams.None -> emptyList()
                    AsciidocDiagrams.Diagrams -> listOf("asciidoctor-diagram")
                    AsciidocDiagrams.Kroki -> listOf("asciidoctor-kroki")
                }
            },
            loadBundledMacros = bundledMacros,
            attributes = diagramAttributes(diagrams) + attributes,
            workdir = baseDir
        )
    }

    private fun diagramAttributes(diagrams: AsciidocDiagrams): Map<String, Any?> {
        if (diagrams != AsciidocDiagrams.Kroki) return emptyMap()

        return buildMap {
            kroki.server?.let { put("kroki-server-url", it.toString()) }
            kroki.defaultFormat?.let { put("kroki-default-format", it) }
            put("kroki-fetch-diagram", "${kroki.fetch}")
        }
    }
}

enum class AsciidocDiagrams {
    None, Diagrams, Kroki
}

data class KrokiDiagramsParameters(
    val server: URI? = null,
    val fetch: Boolean = true,
    val defaultFormat: String? = null
)