package com.github.zeldigas.text2confl.core

import com.github.zeldigas.confclient.ConfluenceClient
import com.github.zeldigas.confclient.ConfluenceClientConfig
import com.github.zeldigas.confclient.confluenceClient
import com.github.zeldigas.confclient.confluenceClientV2
import com.github.zeldigas.text2confl.convert.ConversionParameters
import com.github.zeldigas.text2confl.convert.Converter
import com.github.zeldigas.text2confl.convert.DEFAULT_AUTOGEN_BANNER
import com.github.zeldigas.text2confl.convert.universalConverter
import com.github.zeldigas.text2confl.core.config.ConverterConfig
import com.github.zeldigas.text2confl.core.config.UploadConfig
import com.github.zeldigas.text2confl.core.export.PageExporter
import com.github.zeldigas.text2confl.core.upload.ContentUploader
import com.github.zeldigas.text2confl.core.upload.DryRunClient
import com.github.zeldigas.text2confl.core.upload.UploadOperationTracker

interface ServiceProvider {
    fun createConverter(space: String, config: ConverterConfig): Converter
    fun createConfluenceClient(clientConfig: ConfluenceClientConfig, dryRun: Boolean): ConfluenceClient
    fun createUploader(
        client: ConfluenceClient,
        uploadConfig: UploadConfig,
        converterConfig: ConverterConfig,
        uploadOperationTracker: UploadOperationTracker
    ): ContentUploader

    fun createContentValidator(): ContentValidator
    fun createPageExporter(client: ConfluenceClient, saveContentSource: Boolean): PageExporter
}

class ServiceProviderImpl : ServiceProvider {
    override fun createConverter(space: String, config: ConverterConfig): Converter {
        return universalConverter(
            space = space,
            ConversionParameters(
                languageMapper = config.languageMapper,
                titleConverter = config.titleConverter,
                addAutogeneratedNote = config.addAutogeneratedNote ?: (config.docsLocation != null),
                docRootLocation = config.docsLocation ?: "",
                noteText = config.autogeneratedNote ?: DEFAULT_AUTOGEN_BANNER,
                markdownConfiguration = config.markdownConfig,
                asciidoctorConfiguration = config.asciidocConfig,
                editorVersion = config.editorVersion
            )
        )
    }

    override fun createConfluenceClient(clientConfig: ConfluenceClientConfig, dryRun: Boolean): ConfluenceClient {
        val client = if (clientConfig.cloudApi) confluenceClientV2(clientConfig) else confluenceClient(clientConfig)
        return if (dryRun) DryRunClient(client) else client
    }

    override fun createUploader(
        client: ConfluenceClient,
        uploadConfig: UploadConfig,
        converterConfig: ConverterConfig,
        uploadOperationTracker: UploadOperationTracker
    ): ContentUploader {
        return ContentUploader(
            client, uploadConfig.uploadMessage, uploadConfig.notifyWatchers,
            uploadConfig.modificationCheck,
            converterConfig.editorVersion, uploadConfig.removeOrphans,
            uploadConfig.tenant,
            uploadOperationTracker
        )
    }

    override fun createContentValidator(): ContentValidator {
        return ContentValidatorImpl()
    }

    override fun createPageExporter(client: ConfluenceClient, saveContentSource: Boolean): PageExporter {
        return PageExporter(client, saveContentSource)
    }
}